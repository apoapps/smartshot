import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:watch_connectivity/watch_connectivity.dart';
import '../bluetooth/bluetooth_view_model.dart';
import '../watch/watch_service.dart';

enum ConnectivityStatus {
  connected,      // Verde - Todo bien
  warning,        // Amarillo - Parcialmente conectado
  disconnected,   // Rojo - Desconectado
  unknown         // Gris - Estado desconocido
}

class ConnectivityInfo {
  final ConnectivityStatus status;
  final String title;
  final String description;
  final List<String> details;

  ConnectivityInfo({
    required this.status,
    required this.title,
    required this.description,
    required this.details,
  });
}

class ConnectivityService extends ChangeNotifier {
  static final ConnectivityService _instance = ConnectivityService._internal();
  factory ConnectivityService() => _instance;
  ConnectivityService._internal();

  // Estados de conexi√≥n
  bool _bluetoothConnected = false;
  bool _watchPaired = false;
  bool _watchReachable = false;
  bool _watchAppCommunicating = false;
  bool _isInitialized = false;

  // Timer para verificaciones peri√≥dicas
  Timer? _statusCheckTimer;

  // Getters
  bool get isBluetoothConnected => _bluetoothConnected;
  bool get isWatchPaired => _watchPaired;
  bool get isWatchReachable => _watchReachable;
  bool get isWatchAppCommunicating => _watchAppCommunicating;
  bool get isInitialized => _isInitialized;

  // Estados combinados
  ConnectivityStatus get bluetoothStatus => _bluetoothConnected 
      ? ConnectivityStatus.connected 
      : ConnectivityStatus.disconnected;
  
  ConnectivityStatus get watchStatus {
    if (!_watchPaired) return ConnectivityStatus.disconnected;
    if (!_watchReachable) return ConnectivityStatus.warning;
    if (!_watchAppCommunicating) return ConnectivityStatus.warning;
    return ConnectivityStatus.connected;
  }

  ConnectivityStatus get overallStatus {
    final bluetoothOk = _bluetoothConnected;
    final watchOk = _watchPaired && _watchReachable && _watchAppCommunicating;
    
    if (bluetoothOk && watchOk) return ConnectivityStatus.connected;
    if (bluetoothOk || watchOk) return ConnectivityStatus.warning;
    return ConnectivityStatus.disconnected;
  }

  // Inicializar el servicio
  Future<void> initialize() async {
    if (_isInitialized) return;
    
    debugPrint('üîÑ Inicializando ConnectivityService...');
    
    // Verificar estado inicial
    await _checkConnectivityStatus();
    
    // Configurar verificaciones peri√≥dicas cada 5 segundos
    _statusCheckTimer = Timer.periodic(const Duration(seconds: 5), (_) {
      _checkConnectivityStatus();
    });
    
    _isInitialized = true;
    debugPrint('‚úÖ ConnectivityService inicializado');
  }

  // Verificar estados de conectividad
  Future<void> _checkConnectivityStatus() async {
    await _checkBluetoothStatus();
    await _checkWatchStatus();
    notifyListeners();
  }

  // Verificar estado del Bluetooth
  Future<void> _checkBluetoothStatus() async {
    // Nota: Este m√©todo ser√° llamado desde el BluetoothViewModel
    // para actualizar el estado cuando cambie
  }

  // Verificar estado del Apple Watch
  Future<void> _checkWatchStatus() async {
    if (!Platform.isIOS) {
      _watchPaired = false;
      _watchReachable = false;
      _watchAppCommunicating = false;
      return;
    }

    try {
      final WatchConnectivity watchConnectivity = WatchConnectivity();
      
      // Verificar si est√° emparejado
      _watchPaired = await watchConnectivity.isPaired;
      
      // Verificar si est√° alcanzable
      _watchReachable = await watchConnectivity.isReachable;
      
      // Verificar comunicaci√≥n con la app del watch
      if (_watchPaired && _watchReachable) {
        await _testWatchAppCommunication();
      } else {
        _watchAppCommunicating = false;
      }
      
      debugPrint('üì± Estado Watch - Emparejado: $_watchPaired, Alcanzable: $_watchReachable, App comunicando: $_watchAppCommunicating');
      
    } catch (e) {
      debugPrint('‚ùå Error verificando estado del Watch: $e');
      _watchPaired = false;
      _watchReachable = false;
      _watchAppCommunicating = false;
    }
  }

  // Probar comunicaci√≥n con la app del watch
  Future<void> _testWatchAppCommunication() async {
    try {
      final WatchConnectivity watchConnectivity = WatchConnectivity();
      
      // Simplificar el test de comunicaci√≥n sin timeout complejo
      try {
        // Enviar mensaje simple sin esperar respuesta
        await watchConnectivity.sendMessage({
          'action': 'ping',
          'timestamp': DateTime.now().millisecondsSinceEpoch
        });
        
        // Si no hay excepci√≥n, asumimos que la comunicaci√≥n funciona
        _watchAppCommunicating = true;
        debugPrint('üì± Comunicaci√≥n con app del Watch: OK');
        
      } on Exception {
        _watchAppCommunicating = false;
        debugPrint('üì± Comunicaci√≥n con app del Watch: FAILED');
      }
      
    } catch (e) {
      _watchAppCommunicating = false;
      debugPrint('‚ùå Error en comunicaci√≥n con app del Watch: $e');
    }
  }

  // Actualizar estado del Bluetooth desde el ViewModel
  void updateBluetoothStatus(bool connected) {
    if (_bluetoothConnected != connected) {
      _bluetoothConnected = connected;
      debugPrint('üîµ Estado Bluetooth actualizado: ${connected ? 'Conectado' : 'Desconectado'}');
      notifyListeners();
    }
  }

  // Forzar verificaci√≥n de estado
  Future<void> forceCheck() async {
    await _checkConnectivityStatus();
  }

  // Obtener informaci√≥n detallada del Bluetooth
  ConnectivityInfo getBluetoothInfo() {
    if (_bluetoothConnected) {
      return ConnectivityInfo(
        status: ConnectivityStatus.connected,
        title: 'Sensor Bluetooth',
        description: 'Conectado y funcionando',
        details: [
          '‚úÖ Dispositivo SmartShot conectado',
          '‚úÖ Recibiendo datos del sensor',
          '‚úÖ Listo para detectar tiros'
        ],
      );
    } else {
      return ConnectivityInfo(
        status: ConnectivityStatus.disconnected,
        title: 'Sensor Bluetooth',
        description: 'No conectado',
        details: [
          '‚ùå Dispositivo SmartShot no encontrado',
          '‚Ä¢ Verifica que el sensor est√© encendido',
          '‚Ä¢ Aseg√∫rate de que el Bluetooth est√© habilitado',
          '‚Ä¢ Mant√©n el dispositivo cerca del sensor'
        ],
      );
    }
  }

  // Obtener informaci√≥n detallada del Apple Watch
  ConnectivityInfo getWatchInfo() {
    if (!Platform.isIOS) {
      return ConnectivityInfo(
        status: ConnectivityStatus.disconnected,
        title: 'Apple Watch',
        description: 'No soportado en este dispositivo',
        details: [
          '‚ùå Apple Watch solo disponible en iOS',
        ],
      );
    }

    if (!_watchPaired) {
      return ConnectivityInfo(
        status: ConnectivityStatus.disconnected,
        title: 'Apple Watch',
        description: 'No emparejado',
        details: [
          '‚ùå Apple Watch no emparejado',
          '‚Ä¢ Abre la app Watch en tu iPhone',
          '‚Ä¢ Sigue el proceso de emparejamiento',
          '‚Ä¢ Aseg√∫rate de que ambos dispositivos est√©n cerca'
        ],
      );
    }

    if (!_watchReachable) {
      return ConnectivityInfo(
        status: ConnectivityStatus.warning,
        title: 'Apple Watch',
        description: 'Emparejado pero no alcanzable',
        details: [
          '‚ö†Ô∏è Apple Watch emparejado pero no alcanzable',
          '‚Ä¢ Verifica que el Watch est√© encendido',
          '‚Ä¢ Aseg√∫rate de que est√© en rango',
          '‚Ä¢ Revisa la conexi√≥n WiFi/Bluetooth'
        ],
      );
    }

    if (!_watchAppCommunicating) {
      return ConnectivityInfo(
        status: ConnectivityStatus.warning,
        title: 'Apple Watch',
        description: 'App del Watch no responde',
        details: [
          '‚ö†Ô∏è Apple Watch conectado pero la app no responde',
          '‚Ä¢ Abre la app SmartShot en tu Apple Watch',
          '‚Ä¢ Verifica que la app est√© instalada',
          '‚Ä¢ Reinicia la app del Watch si es necesario'
        ],
      );
    }

    return ConnectivityInfo(
      status: ConnectivityStatus.connected,
      title: 'Apple Watch',
      description: 'Conectado y comunicando',
      details: [
        '‚úÖ Apple Watch emparejado',
        '‚úÖ Dispositivo alcanzable',
        '‚úÖ App SmartShot respondiendo',
        '‚úÖ Listo para detectar tiros'
      ],
    );
  }

  // Verificar si se puede iniciar una sesi√≥n
  bool canStartSession() {
    // Requiere al menos Bluetooth O Watch funcionales
    return _bluetoothConnected || (_watchPaired && _watchReachable && _watchAppCommunicating);
  }

  // Obtener mensaje de error para sesi√≥n
  String getSessionBlockMessage() {
    if (!_bluetoothConnected && !_watchPaired) {
      return 'Necesitas conectar el sensor Bluetooth o emparejar el Apple Watch para comenzar una sesi√≥n';
    }
    if (!_bluetoothConnected && !_watchAppCommunicating) {
      return 'El Apple Watch est√° emparejado pero la app SmartShot no est√° respondiendo. √Åbrela en tu Watch o conecta el sensor Bluetooth';
    }
    return 'Al menos un dispositivo debe estar conectado para iniciar una sesi√≥n';
  }

  @override
  void dispose() {
    _statusCheckTimer?.cancel();
    super.dispose();
  }
} 